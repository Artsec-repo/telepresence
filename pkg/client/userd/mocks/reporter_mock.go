// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/telepresenceio/telepresence/v2/pkg/client/userd (interfaces: Reporter)

// Package mock_userd is a generated GoMock package.
package mock_userd

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	scout "github.com/telepresenceio/telepresence/v2/pkg/client/scout"
)

// MockReporter is a mock of Reporter interface.
type MockReporter struct {
	ctrl     *gomock.Controller
	recorder *MockReporterMockRecorder
}

// MockReporterMockRecorder is the mock recorder for MockReporter.
type MockReporterMockRecorder struct {
	mock *MockReporter
}

// NewMockReporter creates a new mock instance.
func NewMockReporter(ctrl *gomock.Controller) *MockReporter {
	mock := &MockReporter{ctrl: ctrl}
	mock.recorder = &MockReporterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReporter) EXPECT() *MockReporterMockRecorder {
	return m.recorder
}

// InstallID mocks base method.
func (m *MockReporter) InstallID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstallID")
	ret0, _ := ret[0].(string)
	return ret0
}

// InstallID indicates an expected call of InstallID.
func (mr *MockReporterMockRecorder) InstallID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstallID", reflect.TypeOf((*MockReporter)(nil).InstallID))
}

// Report mocks base method.
func (m *MockReporter) Report(arg0 context.Context, arg1 string, arg2 ...scout.Entry) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Report", varargs...)
}

// Report indicates an expected call of Report.
func (mr *MockReporterMockRecorder) Report(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Report", reflect.TypeOf((*MockReporter)(nil).Report), varargs...)
}

// SetMetadatum mocks base method.
func (m *MockReporter) SetMetadatum(arg0 context.Context, arg1 string, arg2 interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetMetadatum", arg0, arg1, arg2)
}

// SetMetadatum indicates an expected call of SetMetadatum.
func (mr *MockReporterMockRecorder) SetMetadatum(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMetadatum", reflect.TypeOf((*MockReporter)(nil).SetMetadatum), arg0, arg1, arg2)
}
