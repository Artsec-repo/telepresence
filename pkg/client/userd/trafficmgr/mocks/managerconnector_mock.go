// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/telepresenceio/telepresence/v2/pkg/client/userd/trafficmgr (interfaces: ManagerConnector)

// Package mock_trafficmgr is a generated GoMock package.
package mock_trafficmgr

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	manager "github.com/telepresenceio/telepresence/rpc/v2/manager"
	dnet "github.com/telepresenceio/telepresence/v2/pkg/dnet"
	grpc "google.golang.org/grpc"
)

// MockManagerConnector is a mock of ManagerConnector interface.
type MockManagerConnector struct {
	ctrl     *gomock.Controller
	recorder *MockManagerConnectorMockRecorder
}

// MockManagerConnectorMockRecorder is the mock recorder for MockManagerConnector.
type MockManagerConnectorMockRecorder struct {
	mock *MockManagerConnector
}

// NewMockManagerConnector creates a new mock instance.
func NewMockManagerConnector(ctrl *gomock.Controller) *MockManagerConnector {
	mock := &MockManagerConnector{ctrl: ctrl}
	mock.recorder = &MockManagerConnectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManagerConnector) EXPECT() *MockManagerConnectorMockRecorder {
	return m.recorder
}

// Connect mocks base method.
func (m *MockManagerConnector) Connect(arg0 context.Context, arg1 string, arg2 dnet.DialerFunc) (*grpc.ClientConn, manager.ManagerClient, *manager.VersionInfo2, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", arg0, arg1, arg2)
	ret0, _ := ret[0].(*grpc.ClientConn)
	ret1, _ := ret[1].(manager.ManagerClient)
	ret2, _ := ret[2].(*manager.VersionInfo2)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// Connect indicates an expected call of Connect.
func (mr *MockManagerConnectorMockRecorder) Connect(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockManagerConnector)(nil).Connect), arg0, arg1, arg2)
}
