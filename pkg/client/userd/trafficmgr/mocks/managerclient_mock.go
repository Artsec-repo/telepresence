// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/telepresenceio/telepresence/rpc/v2/manager (interfaces: ManagerClient)

// Package mock_trafficmgr is a generated GoMock package.
package mock_trafficmgr

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	manager "github.com/telepresenceio/telepresence/rpc/v2/manager"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockManagerClient is a mock of ManagerClient interface.
type MockManagerClient struct {
	ctrl     *gomock.Controller
	recorder *MockManagerClientMockRecorder
}

// MockManagerClientMockRecorder is the mock recorder for MockManagerClient.
type MockManagerClientMockRecorder struct {
	mock *MockManagerClient
}

// NewMockManagerClient creates a new mock instance.
func NewMockManagerClient(ctrl *gomock.Controller) *MockManagerClient {
	mock := &MockManagerClient{ctrl: ctrl}
	mock.recorder = &MockManagerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManagerClient) EXPECT() *MockManagerClientMockRecorder {
	return m.recorder
}

// AgentLookupDNSResponse mocks base method.
func (m *MockManagerClient) AgentLookupDNSResponse(arg0 context.Context, arg1 *manager.DNSAgentResponse, arg2 ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AgentLookupDNSResponse", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AgentLookupDNSResponse indicates an expected call of AgentLookupDNSResponse.
func (mr *MockManagerClientMockRecorder) AgentLookupDNSResponse(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentLookupDNSResponse", reflect.TypeOf((*MockManagerClient)(nil).AgentLookupDNSResponse), varargs...)
}

// AgentLookupHostResponse mocks base method.
func (m *MockManagerClient) AgentLookupHostResponse(arg0 context.Context, arg1 *manager.LookupHostAgentResponse, arg2 ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AgentLookupHostResponse", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AgentLookupHostResponse indicates an expected call of AgentLookupHostResponse.
func (mr *MockManagerClientMockRecorder) AgentLookupHostResponse(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentLookupHostResponse", reflect.TypeOf((*MockManagerClient)(nil).AgentLookupHostResponse), varargs...)
}

// AgentTunnel mocks base method.
func (m *MockManagerClient) AgentTunnel(arg0 context.Context, arg1 ...grpc.CallOption) (manager.Manager_AgentTunnelClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AgentTunnel", varargs...)
	ret0, _ := ret[0].(manager.Manager_AgentTunnelClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AgentTunnel indicates an expected call of AgentTunnel.
func (mr *MockManagerClientMockRecorder) AgentTunnel(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentTunnel", reflect.TypeOf((*MockManagerClient)(nil).AgentTunnel), varargs...)
}

// ArriveAsAgent mocks base method.
func (m *MockManagerClient) ArriveAsAgent(arg0 context.Context, arg1 *manager.AgentInfo, arg2 ...grpc.CallOption) (*manager.SessionInfo, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ArriveAsAgent", varargs...)
	ret0, _ := ret[0].(*manager.SessionInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ArriveAsAgent indicates an expected call of ArriveAsAgent.
func (mr *MockManagerClientMockRecorder) ArriveAsAgent(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ArriveAsAgent", reflect.TypeOf((*MockManagerClient)(nil).ArriveAsAgent), varargs...)
}

// ArriveAsClient mocks base method.
func (m *MockManagerClient) ArriveAsClient(arg0 context.Context, arg1 *manager.ClientInfo, arg2 ...grpc.CallOption) (*manager.SessionInfo, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ArriveAsClient", varargs...)
	ret0, _ := ret[0].(*manager.SessionInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ArriveAsClient indicates an expected call of ArriveAsClient.
func (mr *MockManagerClientMockRecorder) ArriveAsClient(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ArriveAsClient", reflect.TypeOf((*MockManagerClient)(nil).ArriveAsClient), varargs...)
}

// CanConnectAmbassadorCloud mocks base method.
func (m *MockManagerClient) CanConnectAmbassadorCloud(arg0 context.Context, arg1 *emptypb.Empty, arg2 ...grpc.CallOption) (*manager.AmbassadorCloudConnection, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CanConnectAmbassadorCloud", varargs...)
	ret0, _ := ret[0].(*manager.AmbassadorCloudConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CanConnectAmbassadorCloud indicates an expected call of CanConnectAmbassadorCloud.
func (mr *MockManagerClientMockRecorder) CanConnectAmbassadorCloud(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanConnectAmbassadorCloud", reflect.TypeOf((*MockManagerClient)(nil).CanConnectAmbassadorCloud), varargs...)
}

// ClientTunnel mocks base method.
func (m *MockManagerClient) ClientTunnel(arg0 context.Context, arg1 ...grpc.CallOption) (manager.Manager_ClientTunnelClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ClientTunnel", varargs...)
	ret0, _ := ret[0].(manager.Manager_ClientTunnelClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClientTunnel indicates an expected call of ClientTunnel.
func (mr *MockManagerClientMockRecorder) ClientTunnel(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClientTunnel", reflect.TypeOf((*MockManagerClient)(nil).ClientTunnel), varargs...)
}

// CreateIntercept mocks base method.
func (m *MockManagerClient) CreateIntercept(arg0 context.Context, arg1 *manager.CreateInterceptRequest, arg2 ...grpc.CallOption) (*manager.InterceptInfo, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateIntercept", varargs...)
	ret0, _ := ret[0].(*manager.InterceptInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIntercept indicates an expected call of CreateIntercept.
func (mr *MockManagerClientMockRecorder) CreateIntercept(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIntercept", reflect.TypeOf((*MockManagerClient)(nil).CreateIntercept), varargs...)
}

// Depart mocks base method.
func (m *MockManagerClient) Depart(arg0 context.Context, arg1 *manager.SessionInfo, arg2 ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Depart", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Depart indicates an expected call of Depart.
func (mr *MockManagerClientMockRecorder) Depart(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Depart", reflect.TypeOf((*MockManagerClient)(nil).Depart), varargs...)
}

// GetClientConfig mocks base method.
func (m *MockManagerClient) GetClientConfig(arg0 context.Context, arg1 *emptypb.Empty, arg2 ...grpc.CallOption) (*manager.CLIConfig, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetClientConfig", varargs...)
	ret0, _ := ret[0].(*manager.CLIConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientConfig indicates an expected call of GetClientConfig.
func (mr *MockManagerClientMockRecorder) GetClientConfig(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientConfig", reflect.TypeOf((*MockManagerClient)(nil).GetClientConfig), varargs...)
}

// GetCloudConfig mocks base method.
func (m *MockManagerClient) GetCloudConfig(arg0 context.Context, arg1 *emptypb.Empty, arg2 ...grpc.CallOption) (*manager.AmbassadorCloudConfig, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCloudConfig", varargs...)
	ret0, _ := ret[0].(*manager.AmbassadorCloudConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCloudConfig indicates an expected call of GetCloudConfig.
func (mr *MockManagerClientMockRecorder) GetCloudConfig(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCloudConfig", reflect.TypeOf((*MockManagerClient)(nil).GetCloudConfig), varargs...)
}

// GetIntercept mocks base method.
func (m *MockManagerClient) GetIntercept(arg0 context.Context, arg1 *manager.GetInterceptRequest, arg2 ...grpc.CallOption) (*manager.InterceptInfo, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetIntercept", varargs...)
	ret0, _ := ret[0].(*manager.InterceptInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIntercept indicates an expected call of GetIntercept.
func (mr *MockManagerClientMockRecorder) GetIntercept(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIntercept", reflect.TypeOf((*MockManagerClient)(nil).GetIntercept), varargs...)
}

// GetLicense mocks base method.
func (m *MockManagerClient) GetLicense(arg0 context.Context, arg1 *emptypb.Empty, arg2 ...grpc.CallOption) (*manager.License, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLicense", varargs...)
	ret0, _ := ret[0].(*manager.License)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLicense indicates an expected call of GetLicense.
func (mr *MockManagerClientMockRecorder) GetLicense(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLicense", reflect.TypeOf((*MockManagerClient)(nil).GetLicense), varargs...)
}

// GetLogs mocks base method.
func (m *MockManagerClient) GetLogs(arg0 context.Context, arg1 *manager.GetLogsRequest, arg2 ...grpc.CallOption) (*manager.LogsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLogs", varargs...)
	ret0, _ := ret[0].(*manager.LogsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogs indicates an expected call of GetLogs.
func (mr *MockManagerClientMockRecorder) GetLogs(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogs", reflect.TypeOf((*MockManagerClient)(nil).GetLogs), varargs...)
}

// GetTelepresenceAPI mocks base method.
func (m *MockManagerClient) GetTelepresenceAPI(arg0 context.Context, arg1 *emptypb.Empty, arg2 ...grpc.CallOption) (*manager.TelepresenceAPIInfo, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTelepresenceAPI", varargs...)
	ret0, _ := ret[0].(*manager.TelepresenceAPIInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTelepresenceAPI indicates an expected call of GetTelepresenceAPI.
func (mr *MockManagerClientMockRecorder) GetTelepresenceAPI(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTelepresenceAPI", reflect.TypeOf((*MockManagerClient)(nil).GetTelepresenceAPI), varargs...)
}

// LookupDNS mocks base method.
func (m *MockManagerClient) LookupDNS(arg0 context.Context, arg1 *manager.DNSRequest, arg2 ...grpc.CallOption) (*manager.DNSResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LookupDNS", varargs...)
	ret0, _ := ret[0].(*manager.DNSResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupDNS indicates an expected call of LookupDNS.
func (mr *MockManagerClientMockRecorder) LookupDNS(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupDNS", reflect.TypeOf((*MockManagerClient)(nil).LookupDNS), varargs...)
}

// LookupHost mocks base method.
func (m *MockManagerClient) LookupHost(arg0 context.Context, arg1 *manager.LookupHostRequest, arg2 ...grpc.CallOption) (*manager.LookupHostResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LookupHost", varargs...)
	ret0, _ := ret[0].(*manager.LookupHostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupHost indicates an expected call of LookupHost.
func (mr *MockManagerClientMockRecorder) LookupHost(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupHost", reflect.TypeOf((*MockManagerClient)(nil).LookupHost), varargs...)
}

// PrepareIntercept mocks base method.
func (m *MockManagerClient) PrepareIntercept(arg0 context.Context, arg1 *manager.CreateInterceptRequest, arg2 ...grpc.CallOption) (*manager.PreparedIntercept, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PrepareIntercept", varargs...)
	ret0, _ := ret[0].(*manager.PreparedIntercept)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrepareIntercept indicates an expected call of PrepareIntercept.
func (mr *MockManagerClientMockRecorder) PrepareIntercept(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareIntercept", reflect.TypeOf((*MockManagerClient)(nil).PrepareIntercept), varargs...)
}

// Remain mocks base method.
func (m *MockManagerClient) Remain(arg0 context.Context, arg1 *manager.RemainRequest, arg2 ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Remain", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Remain indicates an expected call of Remain.
func (mr *MockManagerClientMockRecorder) Remain(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remain", reflect.TypeOf((*MockManagerClient)(nil).Remain), varargs...)
}

// RemoveIntercept mocks base method.
func (m *MockManagerClient) RemoveIntercept(arg0 context.Context, arg1 *manager.RemoveInterceptRequest2, arg2 ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveIntercept", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveIntercept indicates an expected call of RemoveIntercept.
func (mr *MockManagerClientMockRecorder) RemoveIntercept(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveIntercept", reflect.TypeOf((*MockManagerClient)(nil).RemoveIntercept), varargs...)
}

// ReviewIntercept mocks base method.
func (m *MockManagerClient) ReviewIntercept(arg0 context.Context, arg1 *manager.ReviewInterceptRequest, arg2 ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReviewIntercept", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReviewIntercept indicates an expected call of ReviewIntercept.
func (mr *MockManagerClientMockRecorder) ReviewIntercept(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReviewIntercept", reflect.TypeOf((*MockManagerClient)(nil).ReviewIntercept), varargs...)
}

// SetLogLevel mocks base method.
func (m *MockManagerClient) SetLogLevel(arg0 context.Context, arg1 *manager.LogLevelRequest, arg2 ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetLogLevel", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetLogLevel indicates an expected call of SetLogLevel.
func (mr *MockManagerClientMockRecorder) SetLogLevel(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLogLevel", reflect.TypeOf((*MockManagerClient)(nil).SetLogLevel), varargs...)
}

// Tunnel mocks base method.
func (m *MockManagerClient) Tunnel(arg0 context.Context, arg1 ...grpc.CallOption) (manager.Manager_TunnelClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Tunnel", varargs...)
	ret0, _ := ret[0].(manager.Manager_TunnelClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Tunnel indicates an expected call of Tunnel.
func (mr *MockManagerClientMockRecorder) Tunnel(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tunnel", reflect.TypeOf((*MockManagerClient)(nil).Tunnel), varargs...)
}

// UpdateIntercept mocks base method.
func (m *MockManagerClient) UpdateIntercept(arg0 context.Context, arg1 *manager.UpdateInterceptRequest, arg2 ...grpc.CallOption) (*manager.InterceptInfo, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateIntercept", varargs...)
	ret0, _ := ret[0].(*manager.InterceptInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateIntercept indicates an expected call of UpdateIntercept.
func (mr *MockManagerClientMockRecorder) UpdateIntercept(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIntercept", reflect.TypeOf((*MockManagerClient)(nil).UpdateIntercept), varargs...)
}

// Version mocks base method.
func (m *MockManagerClient) Version(arg0 context.Context, arg1 *emptypb.Empty, arg2 ...grpc.CallOption) (*manager.VersionInfo2, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Version", varargs...)
	ret0, _ := ret[0].(*manager.VersionInfo2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Version indicates an expected call of Version.
func (mr *MockManagerClientMockRecorder) Version(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockManagerClient)(nil).Version), varargs...)
}

// WatchAgents mocks base method.
func (m *MockManagerClient) WatchAgents(arg0 context.Context, arg1 *manager.SessionInfo, arg2 ...grpc.CallOption) (manager.Manager_WatchAgentsClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WatchAgents", varargs...)
	ret0, _ := ret[0].(manager.Manager_WatchAgentsClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchAgents indicates an expected call of WatchAgents.
func (mr *MockManagerClientMockRecorder) WatchAgents(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchAgents", reflect.TypeOf((*MockManagerClient)(nil).WatchAgents), varargs...)
}

// WatchAgentsNS mocks base method.
func (m *MockManagerClient) WatchAgentsNS(arg0 context.Context, arg1 *manager.AgentsRequest, arg2 ...grpc.CallOption) (manager.Manager_WatchAgentsNSClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WatchAgentsNS", varargs...)
	ret0, _ := ret[0].(manager.Manager_WatchAgentsNSClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchAgentsNS indicates an expected call of WatchAgentsNS.
func (mr *MockManagerClientMockRecorder) WatchAgentsNS(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchAgentsNS", reflect.TypeOf((*MockManagerClient)(nil).WatchAgentsNS), varargs...)
}

// WatchClusterInfo mocks base method.
func (m *MockManagerClient) WatchClusterInfo(arg0 context.Context, arg1 *manager.SessionInfo, arg2 ...grpc.CallOption) (manager.Manager_WatchClusterInfoClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WatchClusterInfo", varargs...)
	ret0, _ := ret[0].(manager.Manager_WatchClusterInfoClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchClusterInfo indicates an expected call of WatchClusterInfo.
func (mr *MockManagerClientMockRecorder) WatchClusterInfo(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchClusterInfo", reflect.TypeOf((*MockManagerClient)(nil).WatchClusterInfo), varargs...)
}

// WatchDial mocks base method.
func (m *MockManagerClient) WatchDial(arg0 context.Context, arg1 *manager.SessionInfo, arg2 ...grpc.CallOption) (manager.Manager_WatchDialClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WatchDial", varargs...)
	ret0, _ := ret[0].(manager.Manager_WatchDialClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchDial indicates an expected call of WatchDial.
func (mr *MockManagerClientMockRecorder) WatchDial(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchDial", reflect.TypeOf((*MockManagerClient)(nil).WatchDial), varargs...)
}

// WatchIntercepts mocks base method.
func (m *MockManagerClient) WatchIntercepts(arg0 context.Context, arg1 *manager.SessionInfo, arg2 ...grpc.CallOption) (manager.Manager_WatchInterceptsClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WatchIntercepts", varargs...)
	ret0, _ := ret[0].(manager.Manager_WatchInterceptsClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchIntercepts indicates an expected call of WatchIntercepts.
func (mr *MockManagerClientMockRecorder) WatchIntercepts(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchIntercepts", reflect.TypeOf((*MockManagerClient)(nil).WatchIntercepts), varargs...)
}

// WatchLogLevel mocks base method.
func (m *MockManagerClient) WatchLogLevel(arg0 context.Context, arg1 *emptypb.Empty, arg2 ...grpc.CallOption) (manager.Manager_WatchLogLevelClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WatchLogLevel", varargs...)
	ret0, _ := ret[0].(manager.Manager_WatchLogLevelClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchLogLevel indicates an expected call of WatchLogLevel.
func (mr *MockManagerClientMockRecorder) WatchLogLevel(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchLogLevel", reflect.TypeOf((*MockManagerClient)(nil).WatchLogLevel), varargs...)
}

// WatchLookupDNS mocks base method.
func (m *MockManagerClient) WatchLookupDNS(arg0 context.Context, arg1 *manager.SessionInfo, arg2 ...grpc.CallOption) (manager.Manager_WatchLookupDNSClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WatchLookupDNS", varargs...)
	ret0, _ := ret[0].(manager.Manager_WatchLookupDNSClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchLookupDNS indicates an expected call of WatchLookupDNS.
func (mr *MockManagerClientMockRecorder) WatchLookupDNS(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchLookupDNS", reflect.TypeOf((*MockManagerClient)(nil).WatchLookupDNS), varargs...)
}

// WatchLookupHost mocks base method.
func (m *MockManagerClient) WatchLookupHost(arg0 context.Context, arg1 *manager.SessionInfo, arg2 ...grpc.CallOption) (manager.Manager_WatchLookupHostClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WatchLookupHost", varargs...)
	ret0, _ := ret[0].(manager.Manager_WatchLookupHostClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchLookupHost indicates an expected call of WatchLookupHost.
func (mr *MockManagerClientMockRecorder) WatchLookupHost(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchLookupHost", reflect.TypeOf((*MockManagerClient)(nil).WatchLookupHost), varargs...)
}
