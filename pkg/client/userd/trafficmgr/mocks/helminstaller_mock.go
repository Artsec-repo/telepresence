// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/telepresenceio/telepresence/v2/pkg/client/userd/trafficmgr (interfaces: HelmInstaller)

// Package mock_trafficmgr is a generated GoMock package.
package mock_trafficmgr

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	connector "github.com/telepresenceio/telepresence/rpc/v2/connector"
	genericclioptions "k8s.io/cli-runtime/pkg/genericclioptions"
)

// MockHelmInstaller is a mock of HelmInstaller interface.
type MockHelmInstaller struct {
	ctrl     *gomock.Controller
	recorder *MockHelmInstallerMockRecorder
}

// MockHelmInstallerMockRecorder is the mock recorder for MockHelmInstaller.
type MockHelmInstallerMockRecorder struct {
	mock *MockHelmInstaller
}

// NewMockHelmInstaller creates a new mock instance.
func NewMockHelmInstaller(ctrl *gomock.Controller) *MockHelmInstaller {
	mock := &MockHelmInstaller{ctrl: ctrl}
	mock.recorder = &MockHelmInstallerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHelmInstaller) EXPECT() *MockHelmInstallerMockRecorder {
	return m.recorder
}

// DeleteTrafficManager mocks base method.
func (m *MockHelmInstaller) DeleteTrafficManager(arg0 context.Context, arg1 *genericclioptions.ConfigFlags, arg2 string, arg3 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTrafficManager", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTrafficManager indicates an expected call of DeleteTrafficManager.
func (mr *MockHelmInstallerMockRecorder) DeleteTrafficManager(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTrafficManager", reflect.TypeOf((*MockHelmInstaller)(nil).DeleteTrafficManager), arg0, arg1, arg2, arg3)
}

// EnsureTrafficManager mocks base method.
func (m *MockHelmInstaller) EnsureTrafficManager(arg0 context.Context, arg1 *genericclioptions.ConfigFlags, arg2 string, arg3 *connector.HelmRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureTrafficManager", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureTrafficManager indicates an expected call of EnsureTrafficManager.
func (mr *MockHelmInstallerMockRecorder) EnsureTrafficManager(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureTrafficManager", reflect.TypeOf((*MockHelmInstaller)(nil).EnsureTrafficManager), arg0, arg1, arg2, arg3)
}
