// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/telepresenceio/telepresence/v2/pkg/client/userd/trafficmgr (interfaces: KubeConfigResolver)

// Package mock_trafficmgr is a generated GoMock package.
package mock_trafficmgr

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	client "github.com/telepresenceio/telepresence/v2/pkg/client"
)

// MockKubeConfigResolver is a mock of KubeConfigResolver interface.
type MockKubeConfigResolver struct {
	ctrl     *gomock.Controller
	recorder *MockKubeConfigResolverMockRecorder
}

// MockKubeConfigResolverMockRecorder is the mock recorder for MockKubeConfigResolver.
type MockKubeConfigResolverMockRecorder struct {
	mock *MockKubeConfigResolver
}

// NewMockKubeConfigResolver creates a new mock instance.
func NewMockKubeConfigResolver(ctrl *gomock.Controller) *MockKubeConfigResolver {
	mock := &MockKubeConfigResolver{ctrl: ctrl}
	mock.recorder = &MockKubeConfigResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKubeConfigResolver) EXPECT() *MockKubeConfigResolverMockRecorder {
	return m.recorder
}

// NewInClusterConfig mocks base method.
func (m *MockKubeConfigResolver) NewInClusterConfig(arg0 context.Context, arg1 map[string]string) (*client.Kubeconfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewInClusterConfig", arg0, arg1)
	ret0, _ := ret[0].(*client.Kubeconfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewInClusterConfig indicates an expected call of NewInClusterConfig.
func (mr *MockKubeConfigResolverMockRecorder) NewInClusterConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewInClusterConfig", reflect.TypeOf((*MockKubeConfigResolver)(nil).NewInClusterConfig), arg0, arg1)
}

// NewKubeconfig mocks base method.
func (m *MockKubeConfigResolver) NewKubeconfig(arg0 context.Context, arg1 map[string]string, arg2 string) (*client.Kubeconfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewKubeconfig", arg0, arg1, arg2)
	ret0, _ := ret[0].(*client.Kubeconfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewKubeconfig indicates an expected call of NewKubeconfig.
func (mr *MockKubeConfigResolverMockRecorder) NewKubeconfig(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewKubeconfig", reflect.TypeOf((*MockKubeConfigResolver)(nil).NewKubeconfig), arg0, arg1, arg2)
}
